'''
Created on 2017年9月25日

@author: moonlit

python Z:\StockAnalysis\sourceCode\TuShare\test\src\importAlpha101data.py
'''


# import numpy as np
import pandas as pd
# from Alpha101 import WQ_Alphas_Analysis as aa
from Alpha101 import Alpha101_from_ricequant as ar
import cx_Oracle
import getStockData as gsd
import math

def formatData(data):   
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["max_price"] = data["max_price"]
    test = test.set_index(['code','shi_jian'])
    max_price=test.unstack(level=0)
    max_price=max_price["max_price"]
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["min_price"] = data["min_price"]
    test = test.set_index(['code','shi_jian'])
    min_price=test.unstack(level=0)    
    min_price=min_price["min_price"]
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["price"] = data["price"]
    test = test.set_index(['code','shi_jian'])
    price=test.unstack(level=0)       
    price=price["price"] 
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["return"] = data["return"]
    test = test.set_index(['code','shi_jian'])
    return_=test.unstack(level=0)    
    return_=return_["return"]
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["open"] = data["price_today_open"]
    test = test.set_index(['code','shi_jian'])
    open_=test.unstack(level=0)  
    open_=open_["open"]
#     print(open_)
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["value"] = data["amount"]
    test = test.set_index(['code','shi_jian'])
    amount=test.unstack(level=0)  
    amount=amount["value"]
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["volume"] = data["vol"] 
    test = test.set_index(['code','shi_jian'])
    vol=test.unstack(level=0)
    vol = vol["volume"]
#     print(vol) 
#     print(vol.index)
#     print(vol.columns)  
    
    test = pd.DataFrame()
    test["shi_jian"] = pd.to_datetime(data["shi_jian"])
    test["code"] = data["code"]
    test["cap"] = data["market_cap"]
    test = test.set_index(['code','shi_jian'])
    market_cap=test.unstack(level=0)  
    market_cap=market_cap["cap"]

    data = {'high'  : max_price       ,     
            'low'   : min_price       , 
            'close' : price           ,
            'return': return_         ,
            'open'  : open_,
            'value' : amount,
            'volume': vol,
            'cap'   : market_cap,
            "stop"  : pd.DataFrame([]),
            } 
    return data

pd.DataFrame

# unrealized = [
#                '048',
#                '058',
#                '059',
#                '063',
#                '067',
#                '069',
#                '070',
#                '076',
#                '079',
#                '080',
#                '081',
#                '082',
#                '087',
#                '089',
#                '090',
#                '091',
#                '093',
#                '097',
#                '100',
#              ]

# not_done = ["603025","603085","603196","600996","603721","603826","603100","601021","600959","600919","600987","603303","603515","603501","603505","603938","603579","601628","601390","603005","601877","603158","603189","603929","603528","603985","603896","603718","603338","603803","603990","600890","601991","601177","603936","603799","603533","601888","600980","601231","601886","601069","603988","603298","603360","002900","603117","600892","601211","603123","603166","603980","603508","603496","603939","601727","601328","600962","601001","603081","601168","603225","603519","603977","603019","603131","601288","603002","600971","603089","603006","600992","600917","603839","603566","603222","603518","603277","603031","603127","603026","603208","603639","603555","601999","603009","603001","601968","603788","603520","603676","603818","603989","603968","601996","601588","603011","600982","601966","601899","603007","603323","603339","603696","603717","603567","603698","603882","601229","601098","601377","601566","603086","600978","601018","603886","603358","603308","603586","603388","600990","601128","603617","603535","603333","603828","603368","603315","603321","601988","601200","601375","600967","600898","603181","603536","603686","603359","601208","603188","601777","601000","600979","603197","603203","601858","601918","603099","603869","603385","603868","603588","603159","601515","600887","600885","601336","601811","601010","601616","601339","603559","603960","603909","603488","603238","600909","603015","603022","601801","603955","603978","603027","601126","600965","601952","603677","603859","603569","002901","601601","601100","603139","600986","603028","603268","603879","603908","603979","300702","601669","601985","601163","601928","603393","603421","603725","601166","603186","603088","603996","603606","603668","603612","603429","603055","600973","600900","603133","603903","603707","603218","603889","603906","603126","601611","601011","603078","600969","603801","601518","603042","603039","601225","600893","601599","603878","603316","601949","600889","600998","600963","601228","603160","601799","603232","603398","603918","601198","601555","603098","601007","603444","603313","601908","603090","603038","600926","601718","601997","603113","603389","603667","601992","603601","603633","603599","603577","603901","603738","603797","601038","603128","603129","600997","601677","603328","601901","603337","603656","603729","601137","600895","600884","600896","603041","601717","603116","603003","603305","603787","603598","603557","603660","603999","601998","603030","600975","601388","603168","603299","603998","603808","603817","603966","603556","603355","603106","601111","601608","603169","601900","601016","603380","603618","603993","603900","603963","601258","603111","603021","603040","603737","603578","603688","603319","601318","601965","603017","601688","601003","601188","603199","603585","603018","601216","601006","603458","603636","603958","603813","601186","603043","601398","601101","603306","603600","603703","603678","603648","603637","603010","603118","603008","603679","603326","603899","603798","603777","603866","603288","601890","601169","603079","601500","601700","603767","603766","603969","603877","601808","601618","603012","600995","603016","601798","601158","601008","603377","603628","603758","603690","603778","601881","603177","600888","601636","600988","600993","603568","603266","603357","603138","603167","601969","601678","601012","603727","603366","601179","601800","601872","601333","603399","603861","603322","601880","603096","600908","603345","603800","603919","601009","600960","601326","601633","603630","603933","603811","603033","603077","601127","601212","600939","600985","603701","603318","603226","601579","603029","603987","603881","603858","603626","603991","603036","600981","601878","601369","603716","603726","603730","603776","603615","603580","600054","603595","603386","603032","601313","601368","601311","601199","603997","603611","603500","603023","603035","603108","601882","603369","600966","603037","601238","601155","603589","603855","603838","603789","600970","600977","601666","603200","603558","603527","603387","603822","603050","603183","300703","601857","603603","603286","603843","603669","603335","603538","603383","601818","601788","600976","601933","603063","603416","603228","603699","603883","601619","601113","601939","600936","603663","603928","603825","603269","603819","603609","601116","601567","601595","600883","603060","601929","601099","603898","603658","603880","603300","603976","603309","601088","600897","603165","603330","603456","603258","603816","601919","601789","601028","601118","603885","603336","603708","603689","603331","603227","601366","600894","601002","600983","600999","600891","603069","601015","603180","603887","603926","603638","603757","601600","601989","603000","601233","603101","601222","601958","603233","603833","603198","603728","601607","601668","601866","600958","603178","600984","601689","600961","603020","603058","601058","603920","603229","603665","603806","603517","603602","601898","601218","601020","601139","603066","603608","603239","603959","603823","603320","601766","600886","603986","603616","603311","601117","601107","601226","603067","603179","601699","603860","603779","603888","603223","603768"]
not_done = []
done = ["000001","000002","000004","000005","000006","000007","000008","000009","000010","000011","000012","000014","000016","000017","000018","000019","000020","000021","000022","000023","000025","000026","000027","000028","000029","000030","000031","000032","000034","000035","000036","000037","000038","000039","000040","000042","000043","000045","000046","000048","000049","000050","000055","000056","000058","000059","000060","000061","000062","000063","000065","000066","000068","000069","000070","000078","000088","000089","000090","000096","000099","000100","000150","000151","000153","000156","000157","000158","000159","000166","000301","000333","000338","000400","000401","000402","000403","000404","000407","000408","000409","000410","000411","000413","000415","000416","000417","000418","000419","000420","000421","000422","000423","000425","000426","000428","000429","000430","000488","000498","000501","000502","000503","000504","000505","000506","000507","000509","000510","000513","000514","000516","000517","000518","000519","000520","000521","000523","000524","000525","000526","000528","000529","000530","000531","000532","000533","000534","000536","000537","000538","000539","000540","000541","000543","000544","000545","000546","000547","000548","000550","000551","000552","000553","000554","000555","000557","000558","000559","000560","000561","000563","000564","000565","000566","000567","000568","000570","000571","000572","000573","000576","000581","000582","000584","000585","000586","000587","000589","000590","000591","000592","000593","000595","000596","000597","000598","000599","000600","000601","000603","000605","000606","000607","000608","000609","000610","000611","000612","000613","000615","000616","000617","000619","000620","000622","000623","000625","000626","000627","000628","000630","000631","000632","000633","000635","000636","000637","000638","000639","000650","000651","000652","000655","000656","000657","000659",]

# t = pd.DataFrame([1,2,0,3,np.nan , 4,5])
# t = t.rank(axis = 0,pct=True )

# data,tray_dates = gsd.get_stock_data_daily_101(begin_time="2006-01-04" , end_time="2017-09-22")
data,tray_dates = gsd.get_stock_data_daily_101(begin_time="2017-07-01" , end_time="2017-09-22")
data            = formatData(data= data)
# print(data)
tray_dates      = tray_dates["shi_jian"].values

alpha=ar.Alphas(data)  

all_fieldName = []
all_alpha = []
# for aid in range(1,102) :
for aid in range(98,99) :
    Alphas=alpha.alpha(aid)
    try :
        if Alphas == "id not found":
            continue
    except:
        pass
        
    fieldName = "ALPHA_" + ("000" + str(aid))[-3:]
    
    all_fieldName.append(fieldName)       
    all_alpha.append(Alphas)
    print(fieldName , " done")
     

codes = gsd.get_code_list()
codes = codes["code"].values
# codes = ['600668','600009']
    
db=cx_Oracle.connect('c##stock','didierg160','myoracle')  #创建连接  
cr=db.cursor()
for code in codes :
    
#     if code not in not_done :
#         print("code:",code , "skip")
#         continue

#     if code in done :
#         print("code:",code , "skip")
#         continue
    
    for tray_date in tray_dates :
        count = 0
        sql  = "update tb_stock_alpha101 set " 
        for fieldName,alpha in zip(all_fieldName,all_alpha) : 

            try :
                code_data = alpha[code]
            except:
                continue;
            
#             temp = alpha[alpha.index == tray_date]
#             print(temp)
            
            shi_jian = str(tray_date)[:10]
            value = code_data[code_data.index == tray_date].values
            
            if math.isinf(value) or math.isnan(value) :
                continue            
            
            sql += fieldName +"=" + str(value[0]) + "," 
            count += 1

        if count <1 :
            continue
        
        sql = sql[:-1]
        sql += " where code = '" + code + "' and shi_jian = to_date('" + shi_jian + " 15:00:00','yyyy-mm-dd hh24:mi:ss')"                   
#         print(sql)    
        try : 
            cr.execute(sql)
        except:
            f = open('z:/sqlErr.txt','a')
            f.writelines(sql +"\n")
            print("err:" + sql)     
        
    print("code:",code , "done")
    db.commit()
    
db.commit()
cr.close ()  
db.close ()        
         
print("all done")

# res = aa.factor_cal(data= data , factor_id = "001")
# print(res)
# res  = pd.DataFrame()
# res["code"] = code 
# print(data)
# res["101"]  = data[0]
# res = res.sort_values(by = "101", ascending =False)
# print(res[res["code"] == "600000"])

