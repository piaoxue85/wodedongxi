'''
Created on 2017年6月2日

@author: moonlit
'''
import pandas as pd
import cx_Oracle
from sqlalchemy import create_engine
import tushare as ts
import xlwt
# from math import round

class Trade(object):
    
    def update_position_last_price(self):
        sql = "select code from tb_stock_bigquant_position "
        codes = pd.read_sql_query(sql,con = self.engine) 
        codes = codes["code"].values  
        for code in codes :
            price = self.get_last_price(code = code)
            sql = "update tb_stock_bigquant_position set last_price = "  + str(price) + " where code = '" + code + "'"    

    def __init__(self , start_date = '2007-06-02' , op_date = '2007-06-02',weights = []):
        self.db=cx_Oracle.connect('c##stock','didierg160','myoracle')  #创建连接  
        self.cr=self.db.cursor()
        self.engine = create_engine('oracle://c##stock:didierg160@myoracle')
        
        self.start_date        = start_date
        self.op_date           = op_date
        self.max_cash_per_code = 0.2            # 设置每只股票占用的最大资金比例
        self.hold_days         = 30
        self.weights           = weights    
        self.update_position_last_price()   
        
    
    def get_op_date (self):
        sql = "select to_char(sysdate,'yyyy-mm-dd') today ,to_char(sysdate - 1,'yyyy-mm-dd') yesterday , to_char(sysdate,'hh24miss') time from dual"
        data = pd.read_sql_query(sql,con = self.engine)   
        today     = data["today"].values    
        yesterday = data["yesterday"].values
        time      = data["time"].values

        today     = str(today[0])
        yesterday = str(yesterday[0])
        time      = int(time[0])       
       
        if time > 220000 :
            res = today
        else:
            res = yesterday
        
        return res     
    
    #总市值/配置的持仓时间   平均明天买入的金额
    def cash_avg (self):
        return self.portfolio_value()/self.hold_days
    
    #获取剩余现金
    def cash_balance(self):
        sql = "select value from tb_stock_bigquant_dict where key = 'cash_balance'"
        cash_balance = pd.read_sql_query(sql,con = self.engine)   
        cash_balance = cash_balance["value"].values     
        return float( cash_balance[0] )  
    
    def get_last_price(self,code = ""):
        df = ts.get_realtime_quotes(code) #Single stock symbol
        price_now = df["price"].values[0]
        return float(price_now)
    
    #持仓的单个股票市值
    def position_price(self,code = ""):        
        sql = "select sum(Volume*last_price) total_price from tb_stock_bigquant_position where code = '" + code + "'"
        total_price = pd.read_sql_query(sql,con = self.engine)   
        total_price = total_price["total_price"].values   
        if len(total_price) == 0:
            total_price = [0]
        return float( total_price[0] )        
    
    #持仓股票的总价值
    def position_total_price(self):       
        sql = "select sum(Volume*last_price) total_price from tb_stock_bigquant_position "
        total_price = pd.read_sql_query(sql,con = self.engine)   
        total_price = total_price["total_price"].values 
        if total_price == [None] :
            total_price = [0]
        return float( total_price[0] )  

    #获取总市值
    def portfolio_value(self):
        return self.cash_balance() + self.position_total_price()   
    
    #是否在建仓期 
    def is_staging(self):
        sql   = "select count(1) count  from tb_stock_data_daily where code = 'sh000001' and shi_jian >=to_date('" + self.start_date + " 15:00:00','yyyy-mm-dd hh24:mi:ss')"
        count = pd.read_sql_query(sql,con = self.engine)   
        count = count["count"].values    
        count = count[0]
        return  int(count) < self.hold_days        
    
    #用来买每一只股票的现金 = 剩余现金 和 （最初30天 1 * cash_avg ，30天后 1.5 * cash_avg ）2者的小的那个
    def cash_for_buy(self):
        return min(self.cash_balance(), (1 if self.is_staging() else 1.5) * self.cash_avg())
    
    #当天卖出套现资金配额
    def cash_for_sell(self):
        return  self.cash_avg() - (self.cash_balance() - self.cash_for_buy())
    
    def get_position_ranked(self , order_type = ""):
        sql  = "select b.code ,                                                                      "
        sql += "       b.Volume                                                                      "
        sql += "from tb_stock_bigquant_rank     a ,                                                  "
        sql += "     (                                                                               "
        sql += "        select code,sum(volume) volume from tb_stock_bigquant_position group by code "
        sql += "     )                                                                               "
        sql += "      b                                                                              "
        sql += "where                                                                                "
        sql += "  a.shi_jian = to_date('" + self.op_date +" 15:00:00','yyyy-mm-dd hh24:mi:ss')       "
        sql += "    and                                                                              "
        sql += "  a.code = b.code                                                                    "
        sql += "order by a.rank " + order_type                                                 

        code_ranked = pd.read_sql_query(sql,con = self.engine)   
        code   = code_ranked["code"].values    
        volume = code_ranked["volume"].values 
        return code,volume    
    
    def get_code_list_to_buy_ranked(self , list_length = 5):
        sql  = "select code ,rank                                                                "
        sql += "from tb_stock_bigquant_rank where                                                "
        sql += "  shi_jian = to_date('" + self.op_date +" 15:00:00','yyyy-mm-dd hh24:mi:ss')     "
        sql += "    and                                                                          "
        sql += "  code in                                                                        "
        sql += "  (                                                                              "
        sql += "    select distinct(code) from tb_stock_data_daily where                         "
        sql += "      shi_jian = to_date('" + self.op_date +" 15:00:00','yyyy-mm-dd hh24:mi:ss') "
#         sql += "      shi_jian = (select max(shi_jian) from tb_stock_data_daily where code = 'sh000001') "
        sql += "        and                                                                      "
        sql += "      max_price <> min_price                                                     "
        sql += "        and                                                                      "
        sql += "      zhang_die_rate is not null                                                 "
        sql += "        and                                                                      "        
        sql += "      amount > 0                                                                 "
        sql += "  )                                                                              "
        sql += "    and                                                                          "
        sql += "  code not in                                                                    "
        sql += "  (                                                                              "
        sql += "    select code from tb_stock_list where                                         "
        sql += "      upper(name) like '%ST%'                                                    "
        sql += "        and                                                                      "
        sql += "      upper(name) like '%退%'                                                    "
        sql += "  )                                                                              "
        sql += "order by rank asc                                                                "                                               

        code_ranked = pd.read_sql_query(sql,con = self.engine)   
        code   = code_ranked["code"].values           
        return code[:list_length]           
              
    #收盘卖出
    def sell(self ):
        sell_list = []
        self.update_position_last_price() 
#         print( self.is_staging())
#         print(self.cash_for_sell())
        
#         if  not self.is_staging() and self.cash_for_sell() > 0:
        if True :
            cash_for_sell = self.cash_for_sell()
            res = self.get_position_ranked(order_type="desc")  
            codes,volumes = self.get_position_ranked(order_type="desc")  
            for (code,volume) in zip(codes,volumes) :
                price_now = self.get_last_price(code = code)
                cash_for_sell -= price_now * volume
                sell_list.append( code ) 
                if cash_for_sell <= 0:
                    break 
        if len(sell_list) >0 :
            sell_list = pd.DataFrame(sell_list)
            sell_list.columns = ["股票代码"]               
        return sell_list              
    
    #开盘买入
    def buy(self ):
        buy_list = []
#         buy_xls = []
        self.update_position_last_price()        
        buy_instruments         = self.get_code_list_to_buy_ranked(list_length = len(self.weights))
#         buy_instruments = [
#                             '300029',
#                             '300321',
#                             '300483',
#                             '600385',
#                             '300106'
#                             ]      
        
        
        max_cash_per_instrument = self.portfolio_value() * self.max_cash_per_code
        for code ,weight in zip(buy_instruments,self.weights):
            cash = self.cash_for_buy() * weight
            if cash > max_cash_per_instrument - self.position_price(code=code) : 
                cash = max_cash_per_instrument - self.position_price(code=code)
            
            if cash > 0:
                market = ""
                if (code[0:1] == "6") :
                    market = "上海"
                else :
                    market = "深圳"
                    
                last_price = self.get_last_price(code=code)
                buy_vol = round((float(cash)/last_price)/100)*100
                buy_list.append([market ,code , buy_vol , last_price , cash])
#                 buy_xls.append(object)
        buy_list = pd.DataFrame(buy_list)
        buy_list.columns =[
                        "市场" ,
                        '股票代码 ',
                        '买入股数',
                        "价格" ,
                        '理论买入金额'       
                    ]        
        return buy_list

    

    
    
    
        